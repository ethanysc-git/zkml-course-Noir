// Noir v0.3.2
use dep::std::println;
use dep::std::hash::pedersen;

global M = 10; // size of output layer
global N = 30; // size of last layer 

fn matmul_vec(A: [Field; N*M], x: [Field; N]) -> [Field; M] {
    // A: mxn; X: nx1
    // returns X.A
    let mut out = [0; M];

    for i in 0..N {
        for j in 0..M {
            out[j] += A[i*M + j]*x[i];
        }
    };

    out
}

fn add_vec(u: [Field; M], v: [Field; M]) -> [Field; M] {
    // returns U + V
    let mut out = [0; M];

    for i in 0..M {
        out[i] += u[i] + v[i];
    };
    out
}

fn argmax(x: [Field; M]) -> Field {
    // returns index of max element
    let mut max: u64 = 0;
    let mut out: Field = 0;
    
    for i in 0..M {
        let val = x[i] as u64;
        if val > max {
            max = val;
            out = i;
        }
    };
    out
}

fn pred_class(input: [Field; N], weights: [Field; M*N], biases: [Field; M]) -> Field {
    // computes output layer (Lx+b), and returns class with highest computed probability
    let out1 = matmul_vec(weights, input);
    //println(out1);
    let out2 = add_vec(out1, biases);
    argmax(out2)
}

fn main(input: [Field; N], weights: pub [Field; M*N], biases: pub [Field; M], class: pub Field, input_hash: pub [Field; 2]) {
    let out = pred_class(input, weights, biases);
    let computed_hash = pedersen(input);
    assert(computed_hash == input_hash);
    assert(out == class);
}  

//#[test]
//fn test() {
//    // input vector
//    let x = [105577721, 100000000, 100000000, 100000000, 100683894, 108654075, 120701238, 100000000, 110212142, 100000000, 116759327, 102384641, 116576907, 106058461, 100000000, 100000000, 105637683, 100000000, 100000000, 100000000, 108550579, 106044555, 100000000, 114387544, 107399793, 110073452, 111410959, 100000000, 112652843, 100000000];
//
//    // weights matrix
//    let A = [100003612, 99996978, 99996352, 100001075, 100000551, 99994252, 99996271, 100003901, 100003899, 100005673, 100001249, 100004914, 99996332, 99998171, 100000253, 99996827, 99997411, 99998124, 99997318, 99995870, 99992547, 99994235, 100002203, 100004601, 100004970, 100007240, 99999661, 100005275, 100002043, 99997401, 99995867, 99995889, 99998665, 100001795, 100001040, 100004335, 99993801, 99994738, 99997651, 100002500, 99996064, 99994231, 99999209, 100009001, 100000220, 99997035, 100001916, 99998851, 99998191, 100008306, 100005662, 99997722, 100000522, 100005732, 99998014, 99999933, 100004432, 99996760, 100001955, 99997354, 99999140, 99997425, 100003560, 99996968, 99996162, 99999646, 99998732, 99999881, 100003120, 100000430, 100000900, 100004662, 99999512, 100002201, 100001838, 100001057, 100002144, 99998013, 100002437, 99997755, 99991274, 100010752, 99997016, 100009648, 99998466, 99996149, 99994272, 99994534, 100005538, 100001816, 100007695, 99995303, 100001354, 100000183, 99996312, 100005373, 99998457, 99994197, 100004892, 100005114, 99993877, 99998385, 100006497, 100001030, 100002281, 99998673, 99997233, 99997443, 99995198, 99990480, 100005898, 100003368, 100000466, 100003744, 100006623, 99994085, 100004201, 100005896, 99998639, 100003436, 100003243, 100006437, 100000875, 99999204, 100000048, 99999255, 99991867, 100000647, 99999237, 100001670, 100004278, 99999776, 99996177, 99997576, 99996173, 100002167, 99999641, 100000576, 100009106, 100001970, 100005123, 99993464, 100001582, 99994294, 99992916, 100003472, 99995637, 99997054, 100006322, 99996473, 99998739, 99993479, 100001340, 100001248, 99995864, 99993995, 100002534, 100009120, 100001782, 100004628, 99995444, 100001418, 99991942, 99994188, 99999647, 100001347, 100007390, 99996863, 99997607, 100002976, 100008900, 100004561, 100003848, 100000028, 100003239, 99990847, 100002147, 100006164, 99999578, 100000714, 99996291, 100007968, 99998712, 99998036, 99999502, 99994087, 99995015, 99999764, 99999626, 100004427, 99995815, 100004073, 100000983, 99998957, 100003678, 100001132, 99998393, 100001899, 99998041, 100006380, 99992588, 100003751, 99999925, 99996053, 99997282, 99998443, 100002629, 100010827, 99995736, 100000092, 99996643, 99992922, 100002879, 99997073, 100003538, 99998562, 100004356, 99992352, 100001360, 100004879, 100009564, 99996780, 100005485, 99996881, 99997698, 99998440, 99997910, 99996301, 99994756, 99999816, 100003165, 100003574, 99997732, 99999298, 99994529, 100007017, 100002906, 99997936, 100005395, 99999543, 100005626, 99996068, 99997124, 100001961, 99996332, 100008205, 100000568, 100003394, 99997771, 99999071, 99994681, 100003646, 100003753, 99995074, 99999043, 100002783, 100004335, 100001396, 100005527, 100002539, 100000024, 100003257, 99999767, 99997030, 100004206, 100008175, 99994094, 100000921, 99991858, 100000168, 100004488, 100006516, 99999689, 100001107, 99999044, 100002674, 100008733, 100009853, 99997298, 100000327, 100000989, 99995079, 99999852, 99998139, 100001247, 100002186, 99993439, 100002396, 99996716, 99998805, 99997505, 99996887, 99996447, 99997239, 100004528, 99992814, 100005482, 99996322, 100001590, 99997448];
//
//    // bias vector
//    let b = [99938492, 100018747, 100016737, 99954111, 100033847, 100105394, 100035496, 100090829, 99838382, 99967963]; 
//
//    // matmul result
//    let exp1 = [316376481184671787, 316376332910670110, 316377208615523299, 316378456282472553, 316375968960375174, 316377602822746839, 316376195935607671, 316376968755896784, 316378406556660607, 316377184050780162];
//    
//    // add_vec result
//    let exp2 = [316376481284610279, 316376333010688857, 316377208715540036, 316378456382426664, 316375969060409021, 316377602922852233, 316376196035643167, 316376968855987613, 316378406656498989, 316377184150748125];
//    
//    // argmax result
//    let res = 3;
//
//    let out1 = matmul_vec(A, x);
//    assert(out1 == exp1);
//
//    let out2 = add_vec(out1, b);
//    assert(out2 == exp2);
//
//    let out3 = argmax(out2);
//    println(out3);
//    assert(out3 == res);
//
//}
